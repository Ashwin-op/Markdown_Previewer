{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","inputStyle","width","height","padding","outputStyle","backgroundColor","state","markdown","this","setState","Jumbotron","variant","className","Container","Row","Col","md","style","value","onChange","e","updateMarkdown","target","type","onClick","clearMarkdown","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAGMA,EAASC,EAAQ,IAgERC,E,kDA5DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgBVC,WAAa,CACTC,MAAO,OACPC,OAAQ,OACRC,QAAS,QApBM,EAuBnBC,YAAc,CACVH,MAAO,OACPC,OAAQ,OACRG,gBAAiB,UACjBF,QAAS,QAxBT,EAAKG,MAAQ,CACTC,SAAU,IAJC,E,2DAQJA,GACXC,KAAKC,SAAS,CAACF,e,sCAIfC,KAAKC,SAAS,CAACF,SAAU,O,+BAiBnB,IAAD,OACL,OACI,6BACI,kBAACG,EAAA,EAAD,CAAWC,QAAQ,QAAQC,UAAU,QACjC,kBAACC,EAAA,EAAD,CAAWD,UAAU,eACjB,oDAGR,kBAACE,EAAA,EAAD,CAAKF,UAAU,OACX,kBAACG,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,eAClB,uBAAGA,UAAU,aAAb,kBACA,yBAAKA,UAAU,cACX,8BAAUA,UAAU,QAAQK,MAAOT,KAAKR,WAAYkB,MAAOV,KAAKF,MAAMC,SAC5DY,SAAU,SAAAC,GAAC,OAAI,EAAKC,eAAeD,EAAEE,OAAOJ,WAE1D,4BAAQK,KAAK,SAASX,UAAU,uBAAuBY,QAAS,kBAAM,EAAKC,kBAA3E,UAIJ,kBAACV,EAAA,EAAD,CAAKC,GAAG,KACJ,uBAAGJ,UAAU,yBAAb,WACA,yBAAKA,UAAU,UAAUK,MAAOT,KAAKJ,YAChCsB,wBAAyB,CAACC,OAAQ/B,EAAOY,KAAKF,MAAMC,oB,GArD/DqB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e7df3f0.chunk.js","sourcesContent":["import React from 'react';\nimport {Col, Container, Jumbotron, Row} from 'react-bootstrap';\n\nconst marked = require(\"marked\");\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            markdown: \"\"\n        };\n    }\n\n    updateMarkdown(markdown) {\n        this.setState({markdown});\n    }\n\n    clearMarkdown() {\n        this.setState({markdown: \"\"});\n    }\n\n\n    inputStyle = {\n        width: \"100%\",\n        height: \"50vh\",\n        padding: \"10px\"\n    };\n\n    outputStyle = {\n        width: \"100%\",\n        height: \"50vh\",\n        backgroundColor: \"#DCDCDC\",\n        padding: \"10px\"\n    };\n\n    render() {\n        return (\n            <div>\n                <Jumbotron variant=\"light\" className=\"mb-0\">\n                    <Container className=\"text-center\">\n                        <h1>Markdown Previewer</h1>\n                    </Container>\n                </Jumbotron>\n                <Row className='m-0'>\n                    <Col md='6' className='text-center'>\n                        <p className=\"lead my-4\">Markdown Input</p>\n                        <div className=\"mark-input\">\n                            <textarea className=\"input\" style={this.inputStyle} value={this.state.markdown}\n                                      onChange={e => this.updateMarkdown(e.target.value)}/>\n                        </div>\n                        <button type=\"button\" className=\"btn btn-outline-dark\" onClick={() => this.clearMarkdown()}>\n                            Clear\n                        </button>\n                    </Col>\n                    <Col md='6'>\n                        <p className=\"lead my-4 text-center\">Preview</p>\n                        <div className=\"rounded\" style={this.outputStyle}\n                             dangerouslySetInnerHTML={{__html: marked(this.state.markdown)}}/>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}